
// Fonction d'initialisation pour la vérification de la 2FA
function initializeEnable2FAView() {
    console.log("initializeEnable2FA View called");
    
    // For debugging
    console.log("Form present:", $('#verify-2fa-form').length > 0);
    
    $(document).on('submit', '#verify-2fa-form', function(e) {
        e.preventDefault();
        console.log("Form submitted");
        
        const formData = $(this).serialize();
        console.log("Form data:", formData);
        
        $.ajax({
            url: '/accounts/verify_2fa/',
            method: 'POST',
            data: formData,
            success: function(response) {
                console.log("Response:", response);
                if (response.status === 'success') {
                    $('.verification-success')
                        .text('2FA activé avec succès!')
                        .show();
                    setTimeout(() => {
                        window.location.hash = '#accounts-profile';
                    }, 2000);
                } else {
                    $('.verification-error')
                        .text(response.message || 'Une erreur est survenue')
                        .show();
                    $('#code').val('');
                }
            },
            error: function(xhr) {
                console.error("Error:", xhr);
                $('.verification-error')
                    .text(xhr.responseJSON?.message || 'Une erreur est survenue')
                    .show();
            }
        });
    });
}

// Fonction d'initialisation pour la vérification de la 2FA lors de la connexion
function initializeLogin2FAView() {
    console.log("initializeLogin2FA View called");
    $(document).on('submit', '#login-2fa-form', function(e) {
        e.preventDefault();
        $.ajax({
            url: '/accounts/verify_2fa_login/',
            method: 'POST',
            data: $(this).serialize(),
            success: function(response) {
                if (response.status === 'success') {
                    sessionStorage.setItem('accessToken', response.access);
                    sessionStorage.setItem('refreshToken', response.refresh);
                    // Attendre un petit délai avant de charger la nouvelle barre de navigation
                    setTimeout(function() {
                    window.isAuthenticated = true; // L'utilisateur est maintenant connecté
                    loadNavbar();
                    window.location.hash = '#accounts-profile';
                }, 500); // 500 ms de délai
                } else {
                    alert(response.message);
                }
            },
            error: function(xhr) {
                alert(xhr.responseJSON.message);
            }
        });
    });
}

// Fonction d'initialisation pour la désactivation de la 2FA
function initializeDisable2FAView() {
    console.log("initializeDisable2FA View called");
    $(document).on('submit', '#disable-2fa', function(e) {
        e.preventDefault();
        $.ajax({
            url: '/accounts/disable_2fa/',
            method: 'POST',
            data: $(this).serialize(),
            success: function(response) {
                if (response.status === 'success') {
                    alert(response.message);
                    window.location.href = '#accounts-gestion_profil';
                } else {
                    alert(response.message);
                }
            },
            error: function(xhr) {
                alert(xhr.responseJSON.message);
            }
        });
    });
}// ajax_utils.js

// Fonction pour obtenir le token CSRF
function getCSRFToken() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        if (cookie.trim().startsWith('csrftoken=')) {
            return cookie.trim().substring('csrftoken='.length);
        }
    }
    return '';
}

// Fonction générique pour les requêtes AJAX
function ajaxRequest(url, method, data, successCallback, errorCallback) {
    $.ajax({
        url: url,
        method: method,
        data: data,
        beforeSend: function(xhr, settings) {
            if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type)) {
                xhr.setRequestHeader("X-CSRFToken", getCSRFToken());
            }
        },
        success: successCallback,
        error: errorCallback
    });
}

// animations.js

// Animation du texte des boutons de la page d'accueil
function animateTextColor() {
	let loginButton = document.getElementById('login-btn');
	let registerButton = document.getElementById('register-btn');
	let isOriginalColor = true;
  
	setInterval(function() {
	  if (isOriginalColor) {
		
		setTimeout(function() {
		  if (registerButton) registerButton.style.color = "#8EC7E1";
		  if (loginButton) loginButton.style.color = "#8EC7E1"; 
		}, 10); 

	  } else {
		setTimeout(function() {
		  if (registerButton) registerButton.style.color = "white"; 
		  if (loginButton) loginButton.style.color = "white"; 
		}, 10);
	  }
  
	  isOriginalColor = !isOriginalColor;
	}, 1000); 
}

// Ajuster la hauteur du menu burger avec marges
function adjustBurgerHeight() {
    const navAndMarginHeight = 66; // Hauteur navbar et marge pour le menu burger
    const availableHeight = window.innerHeight - navAndMarginHeight;
    document.documentElement.style.setProperty('--burger-height', `${availableHeight}px`);
}

// Ajuster la hauteur sans la barre navigation
function adjustSinNavHeight() {
    const navAndMarginHeight = 50; // Hauteur sans la navbar
    const availableHeight = window.innerHeight - navAndMarginHeight;
    document.documentElement.style.setProperty('--sin-nav-height', `${availableHeight}px`);
}


//Fonction responsive
function adjustContainer(ContainerId) {
  console.log("Rentre dans adjust container");
	const container = document.getElementById(ContainerId);
	if (!container) {
    console.log("adjustContainer: container error");
    return;
  } 
	const threshold = 50; // Seuil de hauteur pour activer le centrage
	// Si le contenu dépasse la hauteur de l'écran, on enlève `center-content`
	if (container.scrollHeight > window.innerHeight - threshold) {
		container.classList.remove('center-content');
		container.classList.add('normal-content');
	} else {
    container.classList.add('center-content');
		container.classList.remove('normal-content');
	}
}

// animation terrain background

let balle = document.querySelector('.balle');
let traitGauche = document.querySelector('.trait-gauche');
let traitDroit = document.querySelector('.trait-droit');

// Dimensions du terrain en pourcentage
let terrainWidth = 80; // 80vw
let terrainHeight = 40; // 40vw

// Frames adaptées en pourcentage
let frames = [
  { balleX: 1, balleY: 47, raquetteGaucheY: 36.5, raquetteDroiteY: 36.5 },  // Frame 1
  { balleX: 48, balleY: 0, raquetteGaucheY: 0, raquetteDroiteY: 73 },       // Frame 2
  { balleX: 97, balleY: 47, raquetteGaucheY: 47, raquetteDroiteY: 26 },     // Frame 3
  { balleX: 41, balleY: 95, raquetteGaucheY: 7, raquetteDroiteY: 69 },      // Frame 4
  { balleX: 1, balleY: 60, raquetteGaucheY: 60, raquetteDroiteY: 10 },      // Frame 5
  { balleX: 53, balleY: 0, raquetteGaucheY: 7, raquetteDroiteY: 65 },       // Frame 6
  { balleX: 97, balleY: 37, raquetteGaucheY: 67, raquetteDroiteY: 32 },     // Frame 7
  { balleX: 48, balleY: 95, raquetteGaucheY: 7, raquetteDroiteY: 73 }       // Frame 8
];

let currentFrame = 0;
let maxFrames = frames.length;
let transitionTime = 2200; 

// Fonction pour arrêter l'animation de la balle et des raquettes
let animationRunning = true;  // Flag pour suivre l'état de l'animation

function stopPongAnimation() {
    animationRunning = false;  // Indiquer que l'animation ne doit plus tourner
}

function deplacerBalleEtRaquettes() {

  if (!animationRunning) return;  // Arrêter l'animation si le flag est à false
  let frameActuelle = frames[currentFrame];
  let prochaineFrame = frames[(currentFrame + 1) % maxFrames];
  let startTime = null;

  function animate(time) {

    if (!animationRunning) return;  // Stopper immédiatement si l'animation est arrêtée

    if (!startTime) startTime = time;
    let progress = (time - startTime) / transitionTime;

    if (progress < 1) {
      // Interpolation linéaire pour les coordonnées X et Y de la balle
      balle.style.left = frameActuelle.balleX + (prochaineFrame.balleX - frameActuelle.balleX) * progress + '%';
      balle.style.top = frameActuelle.balleY + (prochaineFrame.balleY - frameActuelle.balleY) * progress + '%';

      // Interpolation linéaire pour les positions des raquettes
      traitGauche.style.top = frameActuelle.raquetteGaucheY + (prochaineFrame.raquetteGaucheY - frameActuelle.raquetteGaucheY) * progress + '%';
      traitDroit.style.top = frameActuelle.raquetteDroiteY + (prochaineFrame.raquetteDroiteY - frameActuelle.raquetteDroiteY) * progress + '%';

      requestAnimationFrame(animate);
    } else {
      currentFrame = (currentFrame + 1) % maxFrames;
      setTimeout(() => requestAnimationFrame(deplacerBalleEtRaquettes), 0);
    }
  }

  requestAnimationFrame(animate);
}

// Initialisation des positions de la balle et des raquettes
balle.style.left = frames[0].balleX + '%';
balle.style.top = frames[0].balleY + '%';
traitGauche.style.top = frames[0].raquetteGaucheY + '%';
traitDroit.style.top = frames[0].raquetteDroiteY + '%';

// Lancement de l'animation
deplacerBalleEtRaquettes();

// lancement des fonctions au chargement de la page
window.onload = function() {
    animateTextColor();
    //animatePongGame();
    adjustBurgerHeight();
	adjustSinNavHeight();

    // Écouteur d'événement pour ajuster les hauteurs lors du redimensionnement de la page
    window.addEventListener('resize', () => {
        adjustBurgerHeight();
		adjustSinNavHeight();
    adjustContainer('invite-container'); // Remplacez 'invite-container' par l'ID voulu
    adjustContainer('login');
    adjustContainer('register');
    });

    // Appeler la fonction au chargement et lors du redimensionnement de la fenêtre
    window.addEventListener('load',function() {
      adjustContainer('invite-container'); // Remplacez 'invite-container' par l'ID voulu
    adjustContainer('login');
    adjustContainer('register');
    });


};


// authentication.js

// Fonction d'initialisation de la vue de connexion
function initializeLoginView() {
    console.log("initialize login view");
    // Gestionnaire pour le formulaire de connexion
    $(document).on('submit', '#login-form', function(event) {
        event.preventDefault(); // Empêche le comportement par défaut du formulaire

        const formData = $(this).serialize(); // Sérialise les données du formulaire

        $('#validate-btn').prop('disabled', true).text('Connexion...');

        $.ajax({
            url: '/accounts/submit_login/', // URL de soumission du formulaire
            method: 'POST',
            data: formData,
            success: function(response) {
                console.log("succes avant 2fa");
                if (response.status === 'success') {
                    if (response.requires_2fa) {
                        console.log("succes");
                        window.location.hash = '#accounts-verify_2fa_login';
                    } else {
                        // Stocker les tokens dans `sessionStorage`
                        sessionStorage.setItem('accessToken', response.access);
                        sessionStorage.setItem('refreshToken', response.refresh);

                        // Attendre un petit délai avant de charger la nouvelle barre de navigation
                        setTimeout(function() {
                            window.isAuthenticated = true; // L'utilisateur est maintenant connecté
                            loadNavbar();
                            window.location.hash = '#game-play';
                        }, 500); // 500 ms de délai
                    }
                } else {
                    if (response.errors) {
                        let errors = response.errors;
                        let errorMessages = '';
                        for (let field in errors) {
                            if (errors.hasOwnProperty(field)) {
                                errorMessages += errors[field].join('<br>') + '<br>';
                            }
                        }
                        $('#login-error').html(errorMessages);
                    } else if (response.message) {
                        $('#login-error').text(response.message);
                    }
                }
                $('#validate-btn').prop('disabled', false).text('Valider');
            },
            error: function(error) {
                console.error("Erreur lors de la soumission du formulaire :", error);
                $('#login-error').html('<p>Une erreur est survenue lors de la connexion. Veuillez réessayer.</p>');
                $('#validate-btn').prop('disabled', false).text('Valider');
            }
        });
    });
}


function logoutUser() {
    $.ajax({
        url: '/accounts/logout/',  // URL de la vue logout
        type: 'POST',  // Utilisez POST pour déconnecter
        success: function(response) {
            if (response.status === 'success') {
                console.log('Déconnexion réussie');
                 // Optionnel : Réinitialiser les éléments spécifiques à l'utilisateur
                 $('#navbar').html(''); // Vide la barre de navigation
                 $('#burger-menu').html(''); // Vide le menu burger
                 $('#content').html(''); // Vide le contenu principal si nécessaire
                window.location.href = '/';  // Redirige vers la page d'accueil ou une autre page
            }
        },
        error: function(error) {
            console.error('Erreur lors de la déconnexion :', error);
        }
    });
}




// Fonction pour ajouter un bouton au menu après connexion
function addMenuButton() {
    const menuButton = `
        <a id="menu-btn" class="nav-link text-white d-flex justify-content-center align-items-center" href="#profile">
            <img src="png/7.avif" alt="Menu" style="width: 50px; height:50px;"></img>
        </a>
    `;
    document.getElementById("navbar-right").innerHTML = menuButton;
}

$(document).on('click', '#delete-account-btn', function(event) {
    event.preventDefault();

    // Demande de confirmation à l'utilisateur
    if (window.confirm("Êtes-vous sûr de vouloir supprimer votre compte ? Cette action est irréversible.")) {
        $.ajax({
            url: '/accounts/delete_account/', 
            method: 'DELETE', // Utilisation de la méthode DELETE
            success: function(response) {
                if (response.status === 'success') {
                    // Rediriger l'utilisateur vers la page d'accueil après la suppression
                    window.location.href = '/';
                } else {
                    // Afficher un message d'erreur en cas de problème
                    alert('Une erreur est survenue : ' + response.message);
                }
            },
            error: function(error) {
                // Gérer les erreurs inattendues
                alert('Une erreur est survenue. Veuillez réessayer.');
            }
        });
    }
});
document.addEventListener('DOMContentLoaded', function() {
    const burgerButton = document.getElementById('burger-menu-toggle');
    if (burgerButton) {
        burgerButton.addEventListener('click', function() {
            toggleBurgerMenu();
        });
    }

    // Initialiser les boutons des amis
    initializeFriendButtons();
});

function toggleBurgerMenu() {
    const menu = document.getElementById('burger-menu');
    const overlay = document.getElementById('overlay');

    if (menu && overlay) {
        if (menu.style.display === 'block') {
            menu.style.display = 'none';
            overlay.style.display = 'none';
        } else {
            menu.style.display = 'block';
            overlay.style.display = 'block';

            // Ajouter des gestionnaires de clics pour cacher le menu
            document.querySelectorAll('#profile-btn, #logout-btn, #tournament-link, #settings-link, #play-btn')
                .forEach(function (button) {
                    button.addEventListener('click', function () {
                        menu.style.display = 'none';
                        overlay.style.display = 'none';
                    });
                });

            // Ajouter un gestionnaire global pour cacher le menu en cas de clic à l'extérieur
            document.addEventListener('click', handleOutsideClick);
        }
    }

    // Fonction pour gérer le clic en dehors du menu
    function handleOutsideClick(event) {
        if (!menu.contains(event.target) && !document.getElementById('burger-menu-toggle').contains(event.target)) {
            // Si le clic n'est pas dans le menu ni sur le bouton burger, on cache le menu
            menu.style.display = 'none';
            overlay.style.display = 'none';

            // Retirer ce gestionnaire après avoir fermé le menu
            document.removeEventListener('click', handleOutsideClick);
        }
    }
}

function refreshAccessToken() {
    const refreshToken = sessionStorage.getItem('refreshToken');
    if (!refreshToken) {
        console.error('Refresh token manquant. Impossible de rafraîchir le token JWT.');
        return;
    }

    $.ajax({
        url: '/api/token/refresh/',
        method: 'POST',
        data: {
            'refresh': refreshToken
        },
        success: function(response) {
            console.log('Nouveau token JWT obtenu');
            sessionStorage.setItem('accessToken', response.access);
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de la tentative de rafraîchissement du token JWT :', error);
            // Rediriger vers la page de connexion
            window.location.hash = '#accounts-login';
        }
    });
}

function loadBurgerMenuData() {
    console.log("Appel à loadBurgerMenuData");

    $.ajax({
        url: '/accounts/get_burger_menu_data/',
        method: 'GET',
        cache: false,  // Empêche la mise en cache
        success: function(data) {
            console.log("Réponse reçue de l'API :", data);
            
            if (data.error) {
                console.error('Erreur :', data.error);
                return;
            }

            // Sauvegarde de l'URL de l'avatar pour une utilisation ultérieure
            const avatarUrl = data.data.avatar_url;

            // Mise à jour du nom d'utilisateur et de l'avatar
            $('#profile-avatar').attr('src', avatarUrl);
            $('#profile-username').text(data.data.username);

            // Mise à jour du bouton du menu burger avec l'avatar
            const burgerButton = $('#burger-menu-toggle');
            if (burgerButton.length) {
                // Utiliser l'avatar comme arrière-plan du bouton
                burgerButton.css({
                    'background-image': `url('${avatarUrl}')`,
                    'background-size': 'cover',
                    'background-position': 'center'
                });
            }

            // Mise à jour du statut en ligne du profil
            const statusIndicator = $('#status-indicator');
            if (data.data.is_online) {
                statusIndicator.addClass('online').removeClass('offline');
            } else {
                statusIndicator.addClass('offline').removeClass('online');
            }

            // Mise à jour de la liste des amis
            const friendsListContainer = $('#friends-list-container');
            friendsListContainer.empty();

            console.log("Amis récupérés :", data.data.friends);

            if (data.data.friends && data.data.friends.length > 0) {
                data.data.friends.forEach(function(friend) {
                    const friendItem = `
                        <li class="d-flex align-items-center mb-2 friend-item">
                            <div class="position-relative">
                                <img src="${friend.avatar_url}" alt="Avatar of ${friend.username}" class="rounded-circle me-3" style="width: 50px; height: 50px;">
                                <span class="status-indicator-friend ${friend.status === 'online' ? 'online' : 'offline'}"></span>
                            </div>
                            <button class="friend-btn" data-username="${friend.username}">${friend.username}</button>
                        </li>
                    `;
                    friendsListContainer.append(friendItem);
                });
            } else {
                console.log("Aucun ami trouvé.");
                friendsListContainer.html('<p class="text-center">Aucun ami pour le moment.</p>');
            }

            // Mise à jour des invitations d'amis
            updateFriendRequestsList(data.data.friend_requests);

            // Réinitialiser les boutons des amis après mise à jour
            initializeFriendButtons();
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors du chargement des données du burger-menu :', error);
        }
    });
}


function initializeFriendButtons() {
    $('.friend-btn').off('click').on('click', function(event) {
        const friendName = $(this).data('username');
        showFriendPopup(event, friendName);
    });
}

function updateFriendRequestsList(friendRequests) {
    console.log('friendRequests reçu :', friendRequests);
    if (!Array.isArray(friendRequests)) {
        console.log("Les invitations d'amis sont mal définies ou ne sont pas un tableau:", friendRequests);
        friendRequests = [];
    }

    const friendRequestsListElement = document.getElementById('friend-requests-list-container');
    friendRequestsListElement.innerHTML = '';

    if (friendRequests.length === 0) {
        friendRequestsListElement.innerHTML = '<p class="text-center">Aucune invitation pour le moment.</p>';
    } else {
        friendRequests.forEach(request => {
            const requestItem = `
                <li class="d-flex align-items-center mb-2 request-item">
                    <div class="position-relative">
                        <img src="${request.avatar_url}" alt="Avatar of ${request.from_user}" class="rounded-circle me-3" style="width: 50px; height: 50px;">
                    </div>
                    <div class="d-flex flex-column">
                        <p>${request.from_user}</p>
                        <div class="d-flex">
                            <button class="btn btn-success btn-sm me-2" onclick="handleFriendRequest('${request.id}', 'accept')">Accepter</button>
                            <button class="btn btn-danger btn-sm" onclick="handleFriendRequest('${request.id}', 'decline')">Refuser</button>
                        </div>
                    </div>
                </li>
            `;
            friendRequestsListElement.insertAdjacentHTML('beforeend', requestItem);
        });
    }
}

function setStatus(status) {
    // Envoi de la requête AJAX pour mettre à jour le statut dans la base de données
    $.ajax({
        url: '/accounts/update_status/',
        method: 'POST',
        data: {
            status: status,
        },
        success: function(response) {
            if (response.status === 'success') {
                console.log('Statut mis à jour avec succès');

                // Utiliser la réponse du serveur pour mettre à jour l'indicateur de statut
                const statusIndicator = $('#status-indicator');
                if (statusIndicator) {
                    if (response.is_online) {
                        statusIndicator.addClass('online').removeClass('offline');
                    } else {
                        statusIndicator.addClass('offline').removeClass('online');
                    }
                }
            } else {
                console.error('Erreur lors de la mise à jour du statut :', response.message);
            }
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de l\'envoi de la requête AJAX :', error);
        }
    });
}


function showFriendPopup(event, friendName) {
    event.stopPropagation();
    const popup = document.getElementById('friendPopup');
    document.getElementById('popupFriendName').innerText = friendName;

    popup.classList.remove('d-none');
    const popupWidth = popup.offsetWidth;
    const popupHeight = popup.offsetHeight;

    const menu = document.getElementById('burger-menu');
    const menuRect = menu.getBoundingClientRect();
    const mouseX = event.clientX - menuRect.left + menu.scrollLeft;
    const mouseY = event.clientY - menuRect.top + menu.scrollTop;

    let top, left;

    if (mouseY < 250 && window.innerWidth - mouseX < 175) {
        top = mouseY + popupHeight;
        left = mouseX - (popupWidth / 2);
    } else if (mouseY < 250 && window.innerWidth - mouseX >= 175) {
        top = mouseY + popupHeight;
        left = mouseX + (popupWidth / 2);
    } else if (mouseY >= 250 && window.innerWidth - mouseX >= 175) {
        top = mouseY;
        left = mouseX + (popupWidth / 2);
    } else {
        top = mouseY;
        left = mouseX - (popupWidth / 2);
    }

    popup.style.top = `${top}px`;
    popup.style.left = `${left}px`;

    document.addEventListener('click', closePopupOnClickOutside);
}

function closePopupOnClickOutside(event) {
    const popup = document.getElementById('friendPopup');
    if (!popup.contains(event.target) && !event.target.closest('.friend-item')) {
        popup.classList.add('d-none');
        document.removeEventListener('click', closePopupOnClickOutside);
    }
}

function handleOption(option) {
    const friendName = document.getElementById('popupFriendName').innerText;

    if (option === 'Voir le profil') {
        loadContent('accounts', `friend_profile/${friendName}`);
    } else {
        alert(`${option} sélectionné`);
    }

    document.getElementById('friendPopup').classList.add('d-none');
}

function handleRemoveFriend(friendUsername) {
    $.ajax({
        url: '/accounts/remove_friend/',
        method: 'POST',
        data: {
            'friend_username': friendUsername,
            'csrfmiddlewaretoken': $('input[name="csrfmiddlewaretoken"]').val()
        },
        success: function(response) {
            if (response.status === 'success') {
                alert(response.message);
                // Recharger la liste des amis après suppression
                loadBurgerMenuData();
            } else {
                console.error('Erreur lors de la suppression de l\'ami :', response.message);
            }
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors de la suppression de l\'ami :', error);
        }
    });
}


function sendFriendRequest(toUserId) {
    $.ajax({
        url: `/api/send_friend_request/${toUserId}/`,
        method: 'POST',
        success: function(response) {
            alert(response.message);
            // Optionnel : Rafraîchir la liste d'amis ou mettre à jour l'interface
            refreshFriendsList();
        },
        error: function(xhr, status, error) {
            alert('Erreur lors de l\'envoi de la demande d\'ami : ' + xhr.responseJSON.message || error);
        }
    });
}

function removeFriend(friendId) {
    $.ajax({
        url: `/api/remove_friend/${friendId}/`,
        method: 'POST',
        success: function(response) {
            alert(response.message);
            // Optionnel : Rafraîchir la liste d'amis ou mettre à jour l'interface
            refreshFriendsList();
        },
        error: function(xhr, status, error) {
            alert('Erreur lors de la suppression de l\'ami : ' + xhr.responseJSON.message || error);
        }
    });
}





// L' idee est de rafraichir le profil User pour maintenir la coherence du burger menu

function refreshUserProfile() {
    $.ajax({
        url: '/api/get_user_profile_data/',
        method: 'GET',
        success: function(data) {
            if (data.error) {
                console.error('Erreur:', data.error);
                return;
            }

            // Mise à jour de l'avatar
            $('.profile-section img').attr('src', data.avatar_url);

            // Mise à jour du nom de l'utilisateur
            $('.profile-section h5').text(data.username);

            // Mise à jour de la pastille de statut
            const statusIndicator = $('#status-indicator');
            if (data.is_online) {
                statusIndicator.addClass('online').removeClass('offline');
            } else {
                statusIndicator.addClass('offline').removeClass('online');
            }
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors du rafraîchissement du profil:', error);
        }
    });
}


// Meme idee pour les amis
function refreshFriendsList() {
    $.ajax({
        url: '/api/get_burger_menu_data/',
        method: 'GET',
        success: function(data) {
            const friendsListContainer = $('#friends-list-container');
            friendsListContainer.empty(); // Efface la liste actuelle

            if (data.friends && data.friends.length > 0) {
                data.friends.forEach(function(friend) {
                    const friendItem = `
                        <li class="d-flex align-items-center mb-2 friend-item">
                            <div class="position-relative">
                                <img src="${friend.avatar_url}" alt="Avatar of ${friend.username}" class="rounded-circle me-3" style="width: 50px; height: 50px;">
                                <span class="status-indicator-friend ${friend.status === 'online' ? 'online' : 'offline'}"></span>
                            </div>
                            <button class="friend-btn" onclick="showFriendPopup(event, '${friend.username}')">${friend.username}</button>
                        </li>
                    `;
                    friendsListContainer.append(friendItem);
                });
            } else {
                friendsListContainer.html('<p class="text-center">Aucun ami pour le moment.</p>');
            }
        },
        error: function(xhr, status, error) {
            console.error('Erreur lors du rafraîchissement de la liste des amis:', error);
            $('#friends-list-container').html('<p class="text-center text-danger">Erreur lors du chargement des amis.</p>');
        }
    });
}


//**** Au lieu de rafraichir periodiquement, essayer de rafraichir si gestion profil est appelle*/
//***Pour les amis je pense qu' il faut rester comme ca car nous ne savons pas quand les amis peuvent se supprimer ****/
// Appel initial et mise à jour périodique
// // Initialisation de l'invitation des amis
// function initializeFriendInvitation(participantCount) {
// 	let invitedFriends = 0;

// 	// Gestion de l'invitation avec le bouton
// 	$('.invite-button').click(function() {
// 		const $button = $(this);
		
// 		if (!$button.hasClass('sent')) {
// 			// Ajouter le texte "Envoyé" avec la croix
// 			$button.html('Envoyé <span class="cancel-icon">&times;</span>');
// 			$button.addClass('sent'); // Ajouter une classe indiquant que le bouton est en état "Envoyé"

// 			invitedFriends++;
// 		}
// 		if (invitedFriends >= participantCount) { //ici la condition sera si le nombre de bouton avec état "accepté" a atteint le nombre de participant
// 			if (participantCount === 1)
// 				$('#start-game-btn').removeAttr('disabled'); 
// 			else
// 				$('#start-tournament-btn').removeAttr('disabled'); // Activer le bouton "Commencer"
// 			$('.invite-button').not('.sent').addClass('disabled');
// 		}

// 		// Gestion de l'annulation via la croix
// 		$button.find('.cancel-icon').off('click').on('click', function(event) {
// 			event.stopPropagation(); // Empêcher l'événement de se propager au bouton
// 			cancelInvitation($button);
// 		});
// 		console.log("invited : ",invitedFriends);
// 	});

// 	// Fonction pour annuler une invitation
// 	function cancelInvitation(button) {
// 		button.html('Inviter'); // Remettre le texte à "Inviter"
// 		button.removeClass('sent'); // Retirer l'état "Envoyé"
// 		invitedFriends--;

// 		// Si le nombre d'invitations est inférieur au maximum, désactiver "Commencer" et réactiver les boutons d'invitation
// 		if (invitedFriends < participantCount) {
// 			if (participantCount === 1)
// 				$('#start-game-btn').attr('disabled', true);
// 			else
// 				$('#start-tournament-btn').attr('disabled', true);
// 			$('.invite-button').removeClass('disabled');
// 		}
// 	}

// 	// Ecoute pour le bouton "Commencer" du tournoi si participantCount != 1
// 	$('#start-tournament-btn, #start-game-btn').click(function() {
// 		startLoading(participantCount); // Charger la page d'attente
// 	});
// }

// Initialisation de l'invitation des amis
function initializeFriendInvitation() {
    let invitedFriends = 0;
	let participantCount = 1;
    // Déléguer l'événement de clic pour le bouton principal et la croix via un parent fixe
    $(document).on('click', '.invite-button', function(event) {
        const $button = $(this);

        // Si l'utilisateur clique sur la croix, annuler l'invitation
        if ($(event.target).hasClass('cancel-icon')) {
            event.stopPropagation(); // Empêcher l'événement de se propager au bouton principal
            cancelInvitation($button);
            return;
        }

        // Si le bouton n'est pas en état "Envoyé", envoyer l'invitation
        if (!$button.hasClass('sent')) {
            const friendUsername = $button.siblings('.friend-btn').text();

            // Envoyer l'invitation via une requête AJAX
            $.ajax({
                url: '/game/send_invitation/', // Vue Django qui enverra l'invitation
                method: 'POST',
                data: { friend_username: friendUsername },
                success: function(response) {
                    if (response.status === 'success') {
                        // Ajouter le texte "Envoyé" avec la croix
                        $button.html('Envoyé <span class="cancel-icon">&times;</span>');
                        $button.addClass('sent'); // Ajouter une classe indiquant que le bouton est en état "Envoyé"
                        invitedFriends++;

                        // Désactiver les autres boutons d'invitation si nécessaire
                        if (invitedFriends >= participantCount) {
                            $('.invite-button').not($button).addClass('disabled');
                            // Activer le bouton "Commencer"
                            if (participantCount === 1) {
                                $('#start-game-btn').removeAttr('disabled');
                            } else {
                                $('#start-tournament-btn').removeAttr('disabled');
                            }
                        }
                    }
                },
                error: function(error) {
                    console.error('Erreur lors de l\'envoi de l\'invitation :', error);
                }
            });
        }
    });

    // Fonction pour annuler une invitation
    function cancelInvitation(button) {
        const friendUsername = button.siblings('.friend-btn').text();

        // Envoyer une requête AJAX pour annuler l'invitation
        $.ajax({
            url: '/game/cancel_invitation/', // Vue Django qui annule l'invitation
            method: 'POST',
            headers: {
                'X-CSRFToken': getCSRFToken(), // Ajoute le token CSRF pour la sécurité
            },
            data: { friend_username: friendUsername },
            success: function(response) {
                if (response.status === 'success') {
                    // Remettre le texte du bouton à "Inviter"
                    button.html('Inviter');
                    button.removeClass('sent'); // Retirer l'état "Envoyé"
                    invitedFriends--;

                    // Désactiver le bouton "Commencer" si nécessaire et réactiver les autres boutons
                    if (invitedFriends < participantCount) {
                        if (participantCount === 1) {
                            $('#start-game-btn').attr('disabled', true);
                        } else {
                            $('#start-tournament-btn').attr('disabled', true);
                        }
                        $('.invite-button').removeClass('disabled');
                    }
                }
            },
            error: function(error) {
                console.error('Erreur lors de l\'annulation de l\'invitation :', error);
            }
        });
    }

    // Ecoute pour le bouton "Commencer" du tournoi si participantCount != 1
    $('#start-tournament-btn, #start-game-btn').click(function() {
        startLoading(participantCount); // Charger la page d'attente
    });

}

let loadingTimeout;


// Page de chargement avant le tournoi
function startLoading(participantCount) {
	if (loadingTimeout) {
        clearTimeout(loadingTimeout);
    }
	// Charger la page de chargement personnalisée avec AJAX
    $.ajax({
        url: '/game/loading/', // Chemin vers votre fichier HTML de chargement
        method: 'GET',
        success: function(response) {
			 // Masquer la div contenant le terrain de jeu et désactiver l'animation
			//  $('#ground-game').hide();  // Masquer la div contenant le terrain de jeu

			//  // Arrêter l'animation du terrain de jeu
			//  stopPongAnimation();
            $('#content').html(response); // Injecter le contenu de loading.html dans #hom
			animateLoadingText();
			if (isTouchDevice()) {
                console.log('Appareil tactile détecté. Activation des contrôles tactiles.');
                initializeGameControls('touch'); // Active les contrôles tactiles
            }
			else {
				console.log('Pas un appareil tactile. Aucun contrôle tactile activé.');
				initializeGameControls('keyboard'); // Active les contrôles clavier
			}
			// initializeNavigation();  // A voir avec hamza
            // Définir le timeout pour charger soit le jeu, soit le tournoi
			loadingTimeout = setTimeout(function() {
                if (participantCount === 1) {
                    displayGame(); // Charger le jeu
                } else {
                    displayTournamentBracket(participantCount); // Charger le tableau de tournoi
                }
            }, 20000); // Attendre 20 seconde avant de charger le jeu ou le tournoi (jeu animation js pour le chargement)
        },
        error: function(error) {
            console.log("Erreur lors du chargement de la page de chargement :", error);
        }
    });
}

function animateLoadingText() {
    const loadingText = document.getElementById('loading-text');
    const loadingDots = document.getElementById('loading-dots');
    let dotCount = 0;

    // Crée trois éléments de point pour l'animation
    for (let i = 0; i < 3; i++) {
        const dot = document.createElement('span');
        dot.innerText = '.';
        dot.style.display = 'inline-block';
		dot.style.fontSize = '1.7em';
        dot.style.transition = 'transform 0.3s ease';
        loadingDots.appendChild(dot);
    }

    const dots = loadingDots.children;

    setInterval(() => {
        // Réinitialise la transformation de tous les points
        for (let i = 0; i < dots.length; i++) {
            dots[i].style.transform = 'translateY(0)';
        }

        // Applique un effet de rebond au point actuel
        dots[dotCount].style.transform = 'translateY(-10px)';
        
        // Passe au point suivant ou revient au début
        dotCount = (dotCount + 1) % dots.length;
    }, 300); // Intervalle de 300 ms pour un rebond fluide
}


// Affichage du jeu
function displayGame() {
	$.ajax({
		url: 'game.html', // La page à charger pour le jeu
		method: 'GET',
		success: function(response) {
			$('#home').html(response); // Charger le contenu dans #home
			if ($('#ground-game').length) {
				groundGameContent = $('#ground-game').detach();
			} // Cache le terrain de jeu
			addMenuButton();
			initializeNavigation(); // Réinitialise les écouteurs d’événements
			resetScrollPosition(); // Réinitialiser le scroll
		},
		error: function(error) {
			console.log("Erreur lors du chargement de la page du jeu :", error);
		}
	});
}

// Affichage du tableau du tournoi
function displayTournamentBracket(_participantCount) {
	$.ajax({
		url: _participantCount === 4 ? 'bracket_4.html' : 'bracket_8.html', // La page avec le tableau du tournoi
		method: 'GET',
		success: function(response) {
			$('#home').html(response); // Afficher le tableau
			resetScrollPosition(); // Réinitialiser le scroll
		},
		error: function(error) {
			console.log("Erreur lors du chargement du tableau du tournoi :", error);
		}
	});
}// Fonction pour détecter si l'appareil est tactile
function isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
}


function initializeGameControls(controlType) {

	const player = document.querySelector('.player');
	const gameContainer = document.querySelector('.game-container');
	let containerWidth = gameContainer.offsetWidth;
	let containerHeight = gameContainer.offsetHeight;
	const collectibleCount = 9;
	const collectibles = [];
	let direction = { x: 1, y: 0 }; // Par défaut, déplacement vers la droite
	const playerSpeed = 3;
	let playerX = 0;
	let playerY = containerHeight / 2 - 15; // Milieu vertical
	const keysPressed = {}; // Stocke les touches enfoncées
	let lastDiagonalDirection = null; // Stocke la dernière direction diagonale
	let touchStartX = null; // Stocke la position X du toucher initial
	let touchStartY = null; // Stocke la position Y du toucher initial


	// Initialisation de la position du joueur
	player.style.left = `${playerX}px`;
	player.style.top = `${playerY}px`;

	// Fonction pour éviter que les collectibles ne sortent du conteneur pendant un redimensionnement
	function updateContainerDimensions() {
		containerWidth = gameContainer.offsetWidth;
		containerHeight = gameContainer.offsetHeight - 50;

		// Réajuster les collectibles pour rester dans les limites du conteneur
		collectibles.forEach(collectible => {
			let collectibleX = parseFloat(collectible.style.left);
			let collectibleY = parseFloat(collectible.style.top);

			// Repositionner si le collectible est hors des nouvelles limites
			if (collectibleX + 30 > containerWidth) {
				collectible.style.left = `${containerWidth - 30}px`;
			}
			if (collectibleY + 30 > containerHeight) {
				collectible.style.top = `${containerHeight - 30}px`;
			}
		});
	}

	function createCollectibles() {
		collectibles.forEach(col => col.remove()); // Supprime les collectibles existants
		collectibles.length = 0;

		for (let i = 0; i < collectibleCount; i++) {
			const collectible = document.createElement('div');
			collectible.className = 'collectible';
			collectible.style.left = `${Math.random() * (containerWidth - 30)}px`;
			collectible.style.top = `${Math.random() * (containerHeight - 30)}px`;
			gameContainer.appendChild(collectible);
			collectibles.push(collectible);
		}
	}

	function movePlayer() {
		const length = Math.sqrt(direction.x ** 2 + direction.y ** 2);
		const normalizedDirection = {
			x: (direction.x / length) * playerSpeed,
			y: (direction.y / length) * playerSpeed,
		};

		playerX += normalizedDirection.x;
		playerY += normalizedDirection.y;

		if (playerX < 0) {
			playerX = containerWidth - player.offsetWidth;
		} else if (playerX > containerWidth - player.offsetWidth) {
			playerX = 0;
		}

		if (playerY < 0) {
			playerY = containerHeight - player.offsetHeight;
		} else if (playerY > containerHeight - player.offsetHeight) {
			playerY = 0;
		}

		player.style.left = `${playerX}px`;
		player.style.top = `${playerY}px`;

		collectibles.forEach((collectible, index) => {
			const collectibleRect = collectible.getBoundingClientRect();
			const playerRect = player.getBoundingClientRect();

			if (
				playerRect.left < collectibleRect.right &&
				playerRect.right > collectibleRect.left &&
				playerRect.top < collectibleRect.bottom &&
				playerRect.bottom > collectibleRect.top
			) {
				collectible.remove();
				collectibles.splice(index, 1);

				if (collectibles.length === 0) {
					setTimeout(createCollectibles, 500);
				}
			}
		});
	}

	// Mettre à jour la direction du joueur en fonction des touches enfoncées
	function updateDirection() {
		if (keysPressed['ArrowUp'] && keysPressed['ArrowLeft']) {
			direction = { x: -1, y: -1 };
			lastDiagonalDirection = { x: -1, y: -1 }; 
		} else if (keysPressed['ArrowUp'] && keysPressed['ArrowRight']) {
			direction = { x: 1, y: -1 };
			lastDiagonalDirection = { x: 1, y: -1 };
		} else if (keysPressed['ArrowDown'] && keysPressed['ArrowLeft']) {
			direction = { x: -1, y: 1 };
			lastDiagonalDirection = { x: -1, y: 1 };
		} else if (keysPressed['ArrowDown'] && keysPressed['ArrowRight']) {
			direction = { x: 1, y: 1 };
			lastDiagonalDirection = { x: 1, y: 1 };
		} else if (keysPressed['ArrowUp']) {
			direction = { x: 0, y: -1 };
		} else if (keysPressed['ArrowDown']) {
			direction = { x: 0, y: 1 };
		} else if (keysPressed['ArrowLeft']) {
			direction = { x: -1, y: 0 };
		} else if (keysPressed['ArrowRight']) {
			direction = { x: 1, y: 0 };
		} else if (lastDiagonalDirection) {
			direction = lastDiagonalDirection;
		}
		lastDiagonalDirection = direction;
	}

	function handleTouchStart(event) {
		const touch = event.touches[0];
		touchStartX = touch.clientX;
		touchStartY = touch.clientY;
	}

	function handleTouchMove(event) {
		if (!touchStartX || !touchStartY) return;
	
		const touchEndX = event.touches[0].clientX;
		const touchEndY = event.touches[0].clientY;
	
		const diffX = touchEndX - touchStartX;
		const diffY = touchEndY - touchStartY;
	
		const threshold = 5; // Ajustez ce seuil pour contrôler la sensibilité des diagonales
	
		// Détection de la direction avec le seuil pour les diagonales
		if (Math.abs(diffX) > Math.abs(diffY)) {
			if (Math.abs(diffY) > threshold) {
				// Mouvement horizontal avec diagonale
				direction = {
					x: diffX > 0 ? 1 : -1,
					y: diffY > 0 ? 1 : -1,
				};
			} else {
				// Mouvement strictement horizontal
				direction = { x: diffX > 0 ? 1 : -1, y: 0 };
			}
		} else {
			if (Math.abs(diffX) > threshold) {
				// Mouvement vertical avec diagonale
				direction = {
					x: diffX > 0 ? 1 : -1,
					y: diffY > 0 ? 1 : -1,
				};
			} else {
				// Mouvement strictement vertical
				direction = { x: 0, y: diffY > 0 ? 1 : -1 };
			}
		}
	
		// Mettre à jour les coordonnées de départ pour le prochain mouvement
		touchStartX = touchEndX;
		touchStartY = touchEndY;
	}

	if (controlType === 'keyboard') {
		document.addEventListener('keydown', (e) => {
			keysPressed[e.key] = true;
			updateDirection();
		});
	
		document.addEventListener('keyup', (e) => {
			keysPressed[e.key] = false;
			if (
				!keysPressed['ArrowUp'] &&
				!keysPressed['ArrowDown'] &&
				!keysPressed['ArrowLeft'] &&
				!keysPressed['ArrowRight']
			) {
				if (lastDiagonalDirection) {
					direction = lastDiagonalDirection;
				}
			}
		});
	}

	function gameLoop() {
		movePlayer();
		requestAnimationFrame(gameLoop);
	}

	if (controlType === 'touch') {
		gameContainer.addEventListener('touchstart', handleTouchStart, { passive: false });
		gameContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
	}

	window.addEventListener('resize', () => {
		updateContainerDimensions();
	});

	updateContainerDimensions();
	createCollectibles();
	gameLoop();
}// Déléguer l'événement de clic pour le bouton principal et la croix via un parent fixe
$(document).on('click', '.invite-button', function(event) {
    const $button = $(this);

    // Si l'utilisateur clique sur la croix, annuler l'invitation
    if ($(event.target).hasClass('cancel-icon')) {
        event.stopPropagation(); // Empêcher l'événement de se propager au bouton principal
        cancelInvitation($button);
        return;
    }

    // Si le bouton n'est pas en état "Envoyé", envoyer l'invitation
    if (!$button.hasClass('sent')) {
        const friendUsername = $button.siblings('.friend-btn').text();

        // Envoyer l'invitation via une requête AJAX
        $.ajax({
            url: '/game/send_invitation/', // Vue Django qui enverra l'invitation
            method: 'POST',
            data: { friend_username: friendUsername },
            success: function(response) {
                if (response.status === 'success') {
                    // Ajouter le texte "Envoyé" avec la croix
                    $button.html('Envoyé <span class="cancel-icon">&times;</span>');
                    $button.addClass('sent'); // Ajouter une classe indiquant que le bouton est en état "Envoyé"
                    invitedFriend = friendUsername;

                    // Désactiver les autres boutons d'invitation
                    $('.invite-button').not($button).addClass('disabled');

                    // Activer le bouton "Commencer"
                    $('#start-game-btn').removeAttr('disabled');
                }
            },
            error: function(error) {
                console.error('Erreur lors de l\'envoi de l\'invitation :', error);
            }
        });
    }
});

// Fonction pour annuler une invitation
function cancelInvitation(button) {
    const friendUsername = button.siblings('.friend-btn').text();

    // Envoyer une requête AJAX pour annuler l'invitation
    $.ajax({
        url: '/game/cancel_invitation/', // Vue Django qui annule l'invitation
        method: 'POST',
        data: { friend_username: friendUsername },
        success: function(response) {
            if (response.status === 'success') {
                // Remettre le texte du bouton à "Inviter"
                button.html('Inviter');
                button.removeClass('sent'); // Retirer l'état "Envoyé"
                invitedFriend = null;

                // Désactiver le bouton "Commencer"
                $('#start-game-btn').attr('disabled', true);

                // Réactiver les autres boutons d'invitation
                $('.invite-button').removeClass('disabled');
            }
        },
        error: function(error) {
            console.error('Erreur lors de l\'annulation de l\'invitation :', error);
        }
    });
}// script.js

// Fonction pour obtenir le token CSRF
function getCSRFToken() {
    const cookies = document.cookie.split(';');
    for (let cookie of cookies) {
        if (cookie.trim().startsWith('csrftoken=')) {
            return cookie.trim().substring('csrftoken='.length);
        }
    }
    console.log("Je sors sans token");
    return '';
}

// Configurer les requêtes AJAX pour inclure le token CSRF et le JWT si disponible
$.ajaxSetup({
    beforeSend: function(xhr, settings) {
        // Ajouter le token CSRF pour les requêtes autres que GET, HEAD, OPTIONS, TRACE
        if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type)) {
            xhr.setRequestHeader("X-CSRFToken", getCSRFToken());
        }

        // Ajouter l'en-tête `Authorization` si un accessToken est disponible
        const accessToken = sessionStorage.getItem('accessToken');
        if (accessToken) {
            xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
        }
    }
});


// Charger les modules en fonction des vues
$(window).on('hashchange', handleHashChange);

$(document).ready(function() {
    loadNavbar();
    
    $(document).on('navbarLoaded', function() {
        // Vérifie si le bouton burger est présent pour un utilisateur connecté
        if ($('#burger-menu-toggle').length > 0) {
            console.log("Utilisateur connecté - initialisation du rafraîchissement du menu burger.");
            loadBurgerMenuData();

            // Rafraîchit toutes les 10 secondes si l'utilisateur est connecté
            setInterval(loadBurgerMenuData, 10000);
        }
    });
    handleHashChange();
});

function handleHashChange() {
    console.log("Hash changé : ", window.location.hash);
    const hash = window.location.hash.substring(1); // Supprime le '#'
    const [app, view] = hash.split('-'); // Suppose que le format est 'App-View'
    // Charger la vue spécifiée
    if (app && view) {
        if (view === 'logout')
            logoutUser();
        else
            loadContent(app, view);
    } else {
        window.location.hash = '#core-home';
    }
}


function loadNavbar() {
    console.log("Rentre dans loadNavbar");
    $.ajax({
        url: '/core/get_navbar/',
        method: 'GET',
        success: function(response) {
            $('#navbar').html(response);

            // Vérifie si l'élément `burger-menu-toggle` est présent
            if ($('#burger-menu-toggle').length > 0) {
                console.log("Rentre dans if burger");
                loadBurgerMenuData();
                $('#burger-menu-toggle').on('click', toggleBurgerMenu);
            }

            console.log("Navbar chargée.");
            $(document).trigger('navbarLoaded'); // Déclenche un événement personnalisé lorsque la navbar est chargée
        },
        error: function(xhr) {
            console.error('Erreur lors du chargement de la barre de navigation :', xhr);
        }
    });
}

function loadContent(app, view) {
        $.ajax({
            url: `/${app}/${view}/`,
            method: 'GET',
            success: function(response) {
                $('#content').html(response);
                initializeView(app, view);
            },
            error: function(error) {
                console.error("Erreur lors du chargement de la vue :", error);
                $('#content').html('<p>Une erreur est survenue lors du chargement de la page.</p>');
            }
        });
}

$(document).on('click', '#logout-btn', function(event) {
    event.preventDefault();
    console.log("Login button clicked"); // Pour le débogage
    window.location.hash = '#accounts-logout';
});

$(document).on('click', '#enable-2fa-btn', function(event) {
    event.preventDefault();
    console.log("enable 2fa button clicked"); // Pour le débogage
    window.location.hash = '#accounts-enable_2fa';
});

$(document).on('click', '#disable-2fa-btn', function(event) {
    event.preventDefault();
    console.log("disable 2fa button clicked"); // Pour le débogage
    window.location.hash = '#accounts-disable_2fa';
});

function initializeView(app, view) {
    if (app === 'core' && view === 'home') {
        initializeHomeView();
    } else if (app === 'accounts' && view === 'login') {
        adjustContainer('login');
        initializeLoginView();
    } else if (app === 'accounts' && view === 'register') {
        adjustContainer('register');
        initializeRegisterView();
    } else if (app === 'accounts' && view === 'profile') {
        initializeProfileView();
    } else if (app === 'accounts' && view === 'gestion_profil') {
        initializeProfileFormHandlers(); 
    } else if (app === 'accounts' && view === 'verify_2fa_login') {
        initializeLogin2FAView();
    } else if (app === 'accounts' && view === 'enable_2fa') {
        initializeEnable2FAView();
    } else if (app === 'accounts' && view === 'disable_2fa') {
        initializeDisable2FAView();
    } else if (app === 'game' && view === 'invite_game') {
        initializeFriendInvitation();
    }
}

$(document).on('submit', '#add-friend-form', function(event) {
    event.preventDefault();
    const formData = $(this).serialize(); // Sérialise les données du formulaire

    // Désactiver le bouton pendant le traitement de la requête
    $('#add-friend-form button').prop('disabled', true).text('Ajout en cours...');

    $.ajax({
        url: '/accounts/add_friend/', // URL de soumission du formulaire pour ajouter un ami
        method: 'POST',
        data: formData,
        success: function(response) {
            if (response.status === 'success') {
                // Afficher un message de succès
                $('#add-friend-success').text(response.message).show();
                $('#add-friend-error').hide();

                // Réinitialiser le formulaire
                document.getElementById('add-friend-form').reset();

                // Masquer le message de succès après 3 secondes
                setTimeout(function() {
                    $('#add-friend-success').fadeOut();
                }, 3000);
            } else if (response.status === 'error') {
                // Afficher un message d'erreur
                $('#add-friend-error').text(response.message).show();
                $('#add-friend-success').hide();
            }
            $('#add-friend-form button').prop('disabled', false).text('Ajouter');
        },
        error: function(xhr, status, error) {
            // Gérer les erreurs inattendues
            $('#add-friend-error').html('<p>Une erreur est survenue. Veuillez réessayer.</p>').show();
            $('#add-friend-success').hide();
            $('#add-friend-form button').prop('disabled', false).text('Ajouter');
        }
    });
});


function handleFriendRequest(requestId, action) {
    console.log('Handlefriendrequest request id = ', requestId);
    $.ajax({
        url: '/accounts/handle_friend_request/',
        method: 'POST',
        data: {
            request_id: requestId,
            action: action,
        },
        success: function(response) {
            if (response.status === 'success') {
                alert(`Invitation ${action}ée avec succès.`);
                // Recharger la liste des invitations d'amis
                loadBurgerMenuData();
            } else {
                console.error("Erreur lors du traitement de la requête :", response.error);
            }
        },
        error: function(error) {
            console.error("Erreur lors du traitement de la requête :", error);
        }
    });
}// views_init.js

// Fonction d'initialisation de la vue d'accueil
function initializeHomeView() {
    // Attacher des événements spécifiques à la vue d'accueil
    $(document).on('click', '#login-btn', function(event) {
        event.preventDefault();
        window.location.hash = '#accounts-login';
    });

    $(document).on('click', '#register-btn', function(event) {
        event.preventDefault();
        window.location.hash = '#accounts-register';
    });

    // Appeler la fonction pour animer la couleur du texte
    animateTextColor();
}



// Fonction d'initialisation de la vue d'inscription
function initializeRegisterView() {
    // Gestionnaire pour le formulaire d'inscription
    $(document).on('submit', '#register-form', function(event) {
        event.preventDefault(); // Empêche le comportement par défaut du formulaire

        const formData = $(this).serialize(); // Sérialise les données du formulaire

        $('#submit-btn').prop('disabled', true).text('Inscription en cours...');

        $.ajax({
            url: '/accounts/submit_registration/', // URL de soumission du formulaire d'inscription
            method: 'POST',
            data: formData,
            success: function(response) {
                if (response.status === 'success') {
                    // Afficher un message de succès et rediriger vers la page de connexion
                    alert(response.message);
                    window.location.hash = '#accounts-login';
                } else {
                    if (response.errors) {
                        let errors = response.errors;
                        let errorMessages = '';
                        for (let field in errors) {
                            if (errors.hasOwnProperty(field)) {
                                errorMessages += errors[field].join('<br>') + '<br>';
                            }
                        }
                        $('#register-error').html(errorMessages);
                    }
                }
                $('#submit-btn').prop('disabled', false).text('S\'inscrire');
            },
            error: function(error) {
                console.error("Erreur lors de la soumission du formulaire :", error);
                $('#register-error').html('<p>Une erreur est survenue lors de l\'inscription. Veuillez réessayer.</p>');
                $('#submit-btn').prop('disabled', false).text('S\'inscrire');
            }
        });
    });
}


function initializeProfileView() {
    // Assurez-vous que les événements pertinents sont attachés correctement
    console.log("initializeProfileView called");

    // Mettre à jour dynamiquement les informations du profil si nécessaire
    $('#gestion-btn').on('click', function() {
        window.location.hash = '#accounts-gestion_profil';
    });

    // // Charge l'avatar après modification
    // if ($('#profile-avatar')) {
    //     // Recharger l'avatar si changé
    //     let avatarUrl = $('#profile-avatar').attr('src');
    //     $('#profile-avatar').attr('src', avatarUrl + '?' + new Date().getTime());
    // }
}




function initializeGestionProfileView() {
    console.log("initializeGestionProfileView called."); // Débogage

    // Charger la vue de gestion de profil via AJAX
    $.ajax({
        url: '/accounts/gestion_profil/', // URL pour charger la vue de gestion du profil
        method: 'GET',
        success: function(response) {
            // Insérer la réponse HTML dans le conteneur `#content`
            $('#content').html(response);

            // Initialiser les formulaires après avoir chargé la vue de gestion de profil
            initializeProfileFormHandlers();
        },
        error: function(error) {
            console.error("Erreur lors du chargement de la vue de gestion de profil :", error);
            $('#content').html('<p>Une erreur est survenue lors du chargement de la page de gestion de profil.</p>');
        }
    });
}

function initializeProfileFormHandlers() {
    // Gestion du changement de pseudo
    $(document).on('submit', '#change-username-form', function(event) {
        event.preventDefault();
        const formData = $(this).serialize();
        
        $.ajax({
            url: '/accounts/update_profile/',
            method: 'POST',
            data: formData,
            success: function(response) {
                if (response.success) {
                    $('#change-username-success').text('Pseudo mis à jour avec succès.').show();
                    $('#change-username-error').empty();
                    
                    setTimeout(function() {
                        $('#change-username-success').fadeOut();
                    }, 3000);
                    // Réinitialiser le formulaire
                    document.getElementById('change-username-form').reset();

                    // Recharger la vue profil pour mettre à jour l'interface utilisateur avec le nouveau pseudo
                    loadContent('accounts', 'gestion_profil');

                    // Masquer le message de succès après 3 secondes
                } else {
                    $('#change-username-success').empty();
                    if (response.errors) {
                        let errorMessages = '';
                        for (let field in response.errors) {
                            if (response.errors.hasOwnProperty(field)) {
                                errorMessages += response.errors[field].join('<br>') + '<br>';
                            }
                        }
                        $('#change-username-error').html(errorMessages);
                    } else if (response.error) {
                        $('#change-username-error').text(response.error);
                    }
                }
            },
            error: function(error) {
                console.error("Erreur lors du changement de pseudo :", error);
                $('#change-username-error').html('<p>Une erreur est survenue lors du changement de pseudo. Veuillez réessayer.</p>');
                $('#change-username-success').empty();
            }
        });
    });

    // Gestion du changement de mot de passe
    $(document).on('submit', '#change-password-form', function(event) {
        event.preventDefault();
        const formData = $(this).serialize();

        $.ajax({
            url: '/accounts/change_password/',
            method: 'POST',
            data: formData,
            success: function(response) {
                if (response.status === 'success') {
                    $('#change-password-success').text(response.message).show();
                    $('#change-password-error').empty();

                    // Réinitialiser le formulaire
                    document.getElementById('change-password-form').reset();

                    // Recharger la vue profil pour mettre à jour les données
                    loadContent('accounts', 'gestion_profil');

                    setTimeout(function() {
                        $('#change-password-success').fadeOut();
                    }, 3000);
                } else if (response.status === 'error') {
                    $('#change-password-success').empty();
                    if (response.errors) {
                        let errorMessages = '';
                        for (let field in response.errors) {
                            if (response.errors.hasOwnProperty(field)) {
                                errorMessages += response.errors[field].join('<br>') + '<br>';
                            }
                        }
                        $('#change-password-error').html(errorMessages);
                    } else if (response.message) {
                        $('#change-password-error').text(response.message);
                    }
                }
            },
            error: function(error) {
                console.error("Erreur lors du changement de mot de passe :", error);
                $('#change-password-error').html('<p>Une erreur est survenue lors du changement de mot de passe. Veuillez réessayer.</p>');
                $('#change-password-success').empty();
            }
        });
    });

    // Gestion du changement d'avatar
    $(document).on('submit', '#change-avatar-form', function(event) {
        event.preventDefault();
        const formData = new FormData(this);

        $.ajax({
            url: '/accounts/update_avatar/',
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#change-avatar-success').text('Avatar mis à jour avec succès.').show();
                    $('#change-avatar-error').empty();

                    // Recharger la vue profil pour mettre à jour l'interface utilisateur avec le nouvel avatar
                    loadContent('accounts', 'gestion_profil');

                    setTimeout(function() {
                        $('#change-avatar-success').fadeOut();
                    }, 3000);
                } else {
                    $('#change-avatar-success').empty();
                    if (response.errors) {
                        let errorMessages = '';
                        for (let field in response.errors) {
                            if (response.errors.hasOwnProperty(field)) {
                                errorMessages += response.errors[field].join('<br>') + '<br>';
                            }
                        }
                        $('#change-avatar-error').html(errorMessages);
                    } else if (response.error) {
                        $('#change-avatar-error').text(response.error);
                    }
                }
            },
            error: function(error) {
                console.error("Erreur lors du changement d'avatar :", error);
                $('#change-avatar-error').html('<p>Une erreur est survenue lors du changement d\'avatar. Veuillez réessayer.</p>');
                $('#change-avatar-success').empty();
            }
        });
    });
}
